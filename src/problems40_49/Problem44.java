package problems40_49;

import java.util.ArrayList;

/**
 * @author chris
 *         <p/>
 *         <p/>
 *         Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The
 *         first ten pentagonal numbers are:
 *         <p/>
 *         1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...
 *         <p/>
 *         It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their
 *         difference, 70 − 22 = 48, is not pentagonal.
 *         <p/>
 *         Find the pair of pentagonal numbers, Pj and Pk, for which their sum
 *         and difference are pentagonal and D = |Pk − Pj| is minimised; what is
 *         the value of D?
 */
public class Problem44 {
    static ArrayList<Integer> Pentagon = new ArrayList<Integer>();
    static int maxValue = 0;

    public static void main(String[] args) {
        for (int i = 1; i < 100; i++) {
            Pentagon.add(PentagonNumber(i));
        }
        String answer = null;
        int t = 1000;
        int sizeprev = 0;
        int size = 0;
        for (int k = 0; k < 10; k++) {
            sizeprev = size;
            size = Pentagon.size();
            for (int i = sizeprev; i < size; i++) {
                for (int j = 0; j < size; j++) {
                    if (isPentagonal(Pentagon.get(i) + Pentagon.get(j))) {
                        if (isPentagonal(Pentagon.get(i) - Pentagon.get(j))) {
                            answer = Integer.toString(Math.abs(Pentagon.get(i)
                                    - Pentagon.get(j)));
                        }
                    }
                }
            }
            if (Pentagon.size() > t) {
                System.out.println(t + " " + Pentagon.size());
                t += 1000;
            }
        }
        System.out.println(answer);
    }

    static boolean isPentagonal(int n) {
        if (n > Pentagon.get(Pentagon.size() - 1)) {
            int count = Pentagon.size() + 2;
            int val = Pentagon.get(Pentagon.size() - 1);
            while (n > val) {
                val = PentagonNumber(count);
                Pentagon.add(val);
                count++;
            }
            maxValue = val;
        }
        return Pentagon.contains(n);
    }

    static int PentagonNumber(int n) {
        return (n * (3 * n - 1)) / 2;
    }
}
