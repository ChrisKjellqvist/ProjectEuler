#include <stdio.h>
#include "../include/primes.hpp"

/**
 * @author chris
 *         The sequence of triangle numbers is generated by adding the natural
 *         numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 +
 *         7 = 28. The first ten terms would be:
 *         1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 *         Let us list the factors of the first seven triangle numbers:
 *         1: 1 3: 1,3 6: 1,2,3,6 10: 1,2,5,10 15: 1,3,5,15 21: 1,3,7,21 28:
 *         1,2,4,7,14,28
 *         We can see that 28 is the first triangle number to have over five
 *         divisors.
 *         What is the value of the first triangle number to have over five
 *         hundred divisors?
 */

std::vector<long> Primes;

int getNumDivisors(long Num){
  int NumDivisors = 1; // 1 is always a divisor
  for(long Prime : Primes){
    // For every divisor we've already found, there is another one for every power
    // of the current prime that divides 'Num' (including Prime^0).
    int TimesDivisible = 1;
    while (Num % Prime == 0) {
	++TimesDivisible;
	Num /= Prime;
    }
    NumDivisors *= TimesDivisible;
    if (Num == 1) return NumDivisors;
  }
  return NumDivisors;
}

int main(){
  getPrimes(Primes, 10000000);
  long It, Triangle;
  for(It = 2, Triangle = 1; getNumDivisors(Triangle) < 500; Triangle += It, It += 1);
  printf("%lu\n", Triangle);
}
